usar bridge em interface de rede
1 - instalar em todas
  python3.9 # faz python chamar python3
  python3-pip
  upgrade pip
  adicionar pip ao path
  adicionar ansible ao path
  ansible (2.9.10) # so precisa no master

boa ideia usar cada uma em uma pasta
2 - criar usuário para automação (adduser)
3 - adicionar usuário aos usuários sudo
  /etc/sudoers
  1 - copiar usuário com permissões sudo
  2 - trocar nome no arquivo para ansible, fazer o mesmo para todosas máquinas
  3 - sudo su <usuário> #oq esse comando faz

4 - criar chave ssh para acessar outras máquinas acessarem servidor sem pedir senha
  1 - criar diretório .ssh na home
  2 - fazer no master e copiar conteúdo nas slaves
    1 - ssh keygen rsa (cria chave privada e pública)
    2 - editar chave pública e deixar no final apenas nome de usuário
    3 - criar arquivo authorized keys, adicionar chave pública
    4 - nas slaves, deixar chave privada com permissao 600 (xw--)

5 - criar dns para slave1, slave2 e master
  /etc/hosts, colocar ip de todas as outras máquinas seguido de seu nome

6 - criar arquivo ansible.cfg
  disponível para download no curso
  ansible usa ANSIBLE_CONFIG, exportar para ansible.cfg e torna-la variável fixa

7 - criar pasta inventories e playbooks

8 - conectar ao ansible master por ssh no vscode????

9 - criar arquivo inventory em inventories
  criar grupo |webservers|   
    - slave1 e slave2 dentro do grupo

10 - criar playbook uptime.yml
  hosts webservers
  não coletar dados (gather facts)
  tasks:
    - shell uptime
    - register aponta em q var guardar dados da task
    - debug, mostra variável (mostrar register)

11 - verificar saíta, está em stdout e navegar a variável em debug para que apenas stdout seja mostrado

12 - criar outro playbook
  criar arquivo, testar, remover arquivo, testar

13 - testar mostrar variável usando msg
  msg: "{{variárvel}}"

14 - terminar de ver os últimos 5 minutos do vídeo
